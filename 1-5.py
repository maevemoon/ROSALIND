# 1 DNA Counting DNA Nucleotides
def NucelotideCount(Text):
    counta = 0
    countc = 0
    countg = 0
    countt = 0
    for i in range(len(Text)):
        if Text[i] == "A":
            counta+=1
        elif Text[i] == "C":
            countc+=1
        elif Text[i] == "G":
            countg+=1
        elif Text[i] == "T":
            countt+=1
    nucelotidecount = "{} {} {} {}".format(counta, countc, countg, countt)
    return nucelotidecount

Text = "TTAAATTGTGTGGCTCCATGTGACCCTCTGTCGTAGTGATGGGGGCAGTCTCCAATATAACCATGAGGCCTAGGAGTGAAAACTCCACCGAGCAGAATGTGGTGAAAATTTCGTTTCGTCGCTCCGGACTTCTAAGTCTGCGGGCGTTCTTTCGCTGTAGCTGCCCTAGTGCAGCGAGGTCTCGCTACTGACTGAAGGCCCAACGAGACCCGCCGTGCTCCCGTAAACTGCTTAAGTCATAGCACGCTCAAAAACAATTTGATGGATTGTTACGCTTGCTTACTAACGCACCCGTGATCTATCGGTTGTTAGCGACATACCAGATTCCTCCAGTCACATCCGCCTCTGGACTGAGACTTAGGTTCTCCACAGTGTTATTTGACGCTTGCCTACTCTGTGCATGCAACATGAGACCTCAAATTTCAATCGGGATGCAGGCTAACTTAGTCGCTTTTTGCAAAGGACATCAACTATAATAATTGTCACCTATGTAGCGATAAATTCATGTACCCGGTGGGTACAATAGTGAGTGGAAATGACTGCGCGTGATGATACTAGTTAAAGCGTTTCTAAATAAACTAGAGCTTCTCAAACATAATGTTCGGAAGAGAATCTAGCACGCACGATAGGCACAGTGGGAGTATCTTAATGCTAGGACACCGCGTCTGGAAGATCAGAAGGTAGCTACTATAGTGAACACCCTTCTTAAAATCCACCAACGTGAAAAGGGCGTTTGCTGGTCCCCCAAGTGGAGTTGCTCCGCCCGAATGTTGCTGACAGATCCCTACTAGCAGCATCGCTCTCCACTCTAGTCAGAAGCCCTCCACATACAATCTTGTTTTTTTGTCCCTTGCCCATTGAG"
print(NucelotideCount(Text))

# SOLUTION
# def NucleotideCount(Text):
#    return Text.count("A"), Text.count("C"), Text.count("G"), Text.count("T")


# 2 RNA Transcribing DNA into RNA
def Transcribe(Text):
    rna = Text.replace("T", "U")
    return rna

Text = "TATATTCCGTGTGAGATGTTTTTCTCTAGTATACCACCCGTTTGCGTGCCTAGAAGAAATGGATATCGTGTCAGGTCGTTCCCTCTAAGCAGTGGTGTGACAACTTTCTGCAGTATATACAGGGCCGTAATGGTGACCAAAACGTATGGATGACTCACTTCCATCTACCCTATCCCCTGAATCGTGCTTTGAAGATGTCGCGCTCTGATCTCTAGAGTATTCGCCCAGTGCACTGATCCGGTCTATTGAGTATAACGTCAGACTGTTCGGATCGCCGGACTAACACTATAAACGTGGGATGAGCTTCACAAATCAGCCTAGATCCAGGCCGAGGCTCCGTGACATGGTCATAAAGTTACGAGCGATTGCGGAGAGACCAGGTGCAGACGTCCCCTGCATTGTAGCGATGCAGCATAAAGCAACCAGGATAGGGCTCCCCAAGAAGCCCATCCGAGACGGGTAACTCGCCCGTCAGTTTAGAGCATCATTCGTAGAGGGAGGCATCACCCCCCATAGCTCGACGAGCGTACATATCTCTAATGTAAGTTAATACAAGTTTCAACACAGCTTTTAGATTTCACGCAGTGTTTCCCTAATTCTATCAACTTTAACTAGAGTGTGGGCCCACGGGTGCATTTCCGGACATATCTCGTGTCTAATATCCTCTATAGGGGCTACTACCAGTTTATCGCGCATTCCTGAGTTGCAAATGAGGTAAACAGTCCAATAGCGCATTTGCAGAACAATCCATACGCCGGTCATCGCATACAACGGTTTGTTTACTACTAGGCATCTCTAGGACGGCGTCCCGCAGTGGCTTAGCGTATTAATAATCTCGCACTCGCCATGGTAATATGCGGGCATGTCTCTCCGCGTGATATTGGAGGCGTACACGCGTGTTTCCAGTCGCGATGGTCCGCTTCCAGTTATGCCATTTAGGGTCCCTGTCGGTCTTCGTCATCGGCAA"
print(Transcribe(Text))


# 3 REVC Complementing a Strand of DNA
def ReverseComplement(Text):
    Text = Reverse(Text)
    Text = Complement(Text)
    return Text

def Reverse(Text):
    rev = ""
    for char in Text:
        rev = char + rev
    return rev

def Complement(Text):
    comp = ""
    basepairs = {"A":"T", "T":"A", "C":"G", "G":"C"}
    for char in Text:
        comp = comp + basepairs.get(char)
    return comp

Text = "TTACGTGGAGGTCTAACCGCATCGTCGGGCCGAATCGGCCATTGCTTGGACTCCGGATGGAGCCGGCACGGTCAGGCTTATCCAGAATTATGCGTTCGGTATGCAATACTCAACCCAGCGACTTCATGTTCCTTAGTCCATCTCTCGAACGTGGGACATGAATATAGATTGTCGTTTTAAAGGAGTACTTAGGATAAAGATTGAGCTCCTCGAAGGGACACCGGCTCTACTGAGCACTAACTAGTCTCTGCGGCTGATCTACTCAGTCGGTTTTCCCTCCGCGTTAACTTAATTCAATGATACGGCCCCTTTATGCGATACCACGCGCGCTACGTATGAGCAGCGCGCGGAAGTGTCTGATATGTGCTCTGCCCGTCGCCCGGAACGTGGGCCCTGTTACTTAAGAAATACCACGGACGCCCGGGAAGGAATCACGCCCAGCGTGATACTCACCAGACCTGTCGTTCATGGACTTTACTACAACGGTCTGTATACTTCCTAAGTCCAGACAACTTCGGAACCTAGTCCGAGAGTAGAATGGCAGCCCGGACGTACATCAGTGGTTATTTGCTCATCGTATGTGCATATGAAACCCGTATTCGGTGATGAAGTACGGAGCTCTTCATTGGGTCGCGGGGAGTGAGTGTGCAACACGCCAGATAATAGTTGACATCACAATAATACTGCGTGTTTCGCAGCGACGAGTTCCAACTGTTACCGTAGACTATTGGACGAGATTCGCCCACCAGCAAAATCTGGGGCAGTGCAGAACCATAGAGCCTTAAGTGTGGAGGTTCTCTCTGCTATGTTATATGTGCCGGATGTTTAGCTAGATGGGGAATTAGGGCCGATCAACTAGCCTAACATGTAGA"
print(ReverseComplement(Text))

# SOLUTION
# def ReverseComplement(Text)
#     Text = Text.replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()[::-1]
#     return Text


# 4 FIB Rabbits and Recurrence Relations
def Fibonacci(n, k):
    small = 1
    big =  1
    for months in range(2, n):
        current = big + small*k
        small = big
        big = current
    return current

n = 32
k = 5
print(Fibonacci(n, k))


# 5 GC Computing GC Content